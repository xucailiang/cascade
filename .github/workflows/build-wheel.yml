name: Build and Release Wheel

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [ closed ]

# 工作流级别的权限配置
permissions:
  contents: write    # 允许创建release和推送tag
  packages: write    # 允许发布包
  id-token: write    # 允许OIDC token

jobs:
  build-wheel:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_id: ${{ steps.version.outputs.build_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade setuptools wheel twine build semver packaging
    
    - name: Set version
      id: set_version
      run: |
        # Get the major version from pyproject.toml
        MAJOR_VERSION=$(grep 'version = ' pyproject.toml | awk -F'"' '{print $2}')
        
        # Set the new development version, using the run number as the dev identifier
        NEW_VERSION="${MAJOR_VERSION}.dev${{ github.run_number }}"
        echo "New version: $NEW_VERSION"
        
        # Update the version in pyproject.toml and cascade/__init__.py using a safe separator for sed
        sed -i "s#^version = .*#version = \"$NEW_VERSION\"#" pyproject.toml
        sed -i "s#^__version__ = .*#__version__ = \"$NEW_VERSION\"#" cascade/__init__.py
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Generate a unique build ID
        BUILD_ID=$(date +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)
        echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
    
    - name: Get version info
      id: version
      run: |
        # Get version from cascade/__init__.py after update
        VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\"\'](.*?)[\"\']', open('cascade/__init__.py').read()).group(1))")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
        # Get build identifier from the previous step
        BUILD_ID=${{ steps.set_version.outputs.build_id }}
        echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        echo "Build ID: $BUILD_ID"
    
    - name: Clean previous builds
      run: |
        echo "Cleaning previous build artifacts..."
        rm -rf dist/ build/ *.egg-info/
        
    - name: Build wheel and source distribution
      run: |
        echo "Building wheel and source distribution..."
        python -m build
        
        # Verify build results
        echo "Built packages:"
        ls -la dist/
        
        # Check wheel contents
        echo "Wheel contents:"
        python -m zipfile -l dist/*.whl | head -20
    
    - name: Verify wheel
      run: |
        echo "Verifying wheel installation..."
        pip install dist/*.whl
        python -c "import cascade; print(f'Cascade version: {cascade.__version__}')"
        python -c "import cascade; print('Cascade imported successfully')"
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cascade-vad-wheel-${{ steps.version.outputs.version }}-${{ steps.version.outputs.build_id }}
        path: |
          dist/*.whl
          dist/*.tar.gz
        retention-days: 30
    
    - name: Create release info
      run: |
        echo "Release Information" > release-info.txt
        echo "===================" >> release-info.txt
        echo "Version: ${{ steps.version.outputs.version }}" >> release-info.txt
        echo "Build ID: ${{ steps.version.outputs.build_id }}" >> release-info.txt
        echo "Commit: $(git rev-parse HEAD)" >> release-info.txt
        echo "Branch: ${{ github.ref_name }}" >> release-info.txt
        echo "Trigger: ${{ github.event_name }}" >> release-info.txt
        echo "Date: $(date -u)" >> release-info.txt
        echo "" >> release-info.txt
        echo "Built Files:" >> release-info.txt
        ls -la dist/ >> release-info.txt
        
        cat release-info.txt
    
    - name: Upload release info
      uses: actions/upload-artifact@v4
      with:
        name: release-info-${{ steps.version.outputs.build_id }}
        path: release-info.txt
        retention-days: 30

    - name: Publish to PyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to PyPI..."
        twine upload --skip-existing dist/*
      
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.set_version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          Cascade v${{ steps.version.outputs.version }} Release
          
          ## Installation
          ```bash
          pip install cascade-vad==${{ steps.version.outputs.version }}
          ```
          
          ## Changes
          This release was automatically built from the master branch.
          
          ## Build Info
          - Commit: ${{ github.sha }}
          - Build Date: ${{ github.event.head_commit.timestamp }}
          - Workflow: ${{ github.workflow }}
          - Build ID: ${{ steps.version.outputs.build_id }}
        draft: false
        prerelease: false
        files: dist/*
        token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_unmatched_files: false
        make_latest: true
