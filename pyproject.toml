[build-system]
requires = ["hatchling>=1.20.0"]
build-backend = "hatchling.build"

[project]
name = "cascade"
version = "0.1.0"
description = "高性能异步并行VAD处理库"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Cascade Team", email = "team@cascade-vad.org"}
]
maintainers = [
    {name = "Cascade Team", email = "team@cascade-vad.org"}
]
keywords = [
    "voice-activity-detection", "vad", "audio-processing", 
    "speech", "async", "parallel", "high-performance"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.11"

dependencies = [
    "pydantic>=2.4.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.11.0,<2.0.0",
    "asyncio-throttle>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
# 开发依赖
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
]

# 文档依赖
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
    "markdown-include>=0.8.0",
]

# VAD后端依赖
onnx = [
    "onnxruntime>=1.16.0,<2.0.0",
]
vllm = [
    "vllm>=0.2.0,<1.0.0",
    "torch>=2.0.0,<3.0.0",
]

# 完整安装
full = [
    "cascade[dev,docs,onnx,vllm]"
]

[project.urls]
Documentation = "https://cascade-vad.readthedocs.io/"
Repository = "https://github.com/cascade-team/cascade"
Issues = "https://github.com/cascade-team/cascade/issues"
Changelog = "https://github.com/cascade-team/cascade/blob/main/CHANGELOG.md"

[project.scripts]
cascade-benchmark = "cascade.scripts.benchmark:main"
cascade-validate = "cascade.scripts.validate:main"

# ===== 测试配置 =====
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Test"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=cascade",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--benchmark-skip",
]
markers = [
    "unit: 单元测试",
    "integration: 集成测试",
    "benchmark: 性能基准测试",
    "slow: 慢速测试",
    "audio: 需要音频文件的测试",
]
asyncio_mode = "auto"
timeout = 300

# ===== 覆盖率配置 =====
[tool.coverage.run]
source = ["cascade"]
omit = [
    "cascade/_internal/*",
    "tests/*",
    "examples/*",
    "scripts/*",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false

# ===== 代码格式化 =====
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cascade"]
known_third_party = ["numpy", "scipy", "pydantic", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ===== 类型检查 =====
[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "onnxruntime.*",
    "vllm.*",
]
ignore_missing_imports = true

# ===== Ruff配置 =====
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "A",   # flake8-builtins
    "PL",  # pylint
    "SIM", # flake8-simplify
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
]

[tool.ruff.per-file-ignores]
"tests/*" = ["PLR2004"]  # Magic value used in comparison

# ===== Hatch配置 =====
[tool.hatch.build.targets.wheel]
packages = ["cascade"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/.vscode",
    "/tests",
    "/examples",
    "/docs",
    "/scripts",
]

[tool.hatch.version]
path = "cascade/__init__.py"